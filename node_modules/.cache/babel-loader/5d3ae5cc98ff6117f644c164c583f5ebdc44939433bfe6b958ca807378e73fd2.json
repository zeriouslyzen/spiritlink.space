{"ast":null,"code":"var _jsxFileName = \"/Users/deshonjackson/Desktop/spiritlink.space/src/components/StreamingText.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StreamingText = ({\n  text,\n  isStreaming,\n  brainwaveMode,\n  onComplete\n}) => {\n  _s();\n  const [words, setWords] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  const containerRef = useRef(null);\n\n  // Parse text into words with proper typing\n  useEffect(() => {\n    if (text) {\n      const parsedWords = [];\n      const wordArray = text.split(/(\\s+)/);\n      wordArray.forEach((word, index) => {\n        if (word.trim()) {\n          parsedWords.push({\n            id: `${index}-${word}`,\n            text: word,\n            isVisible: false,\n            type: /^[.,!?;:]$/.test(word) ? 'punctuation' : 'word'\n          });\n        } else if (word.includes('\\n')) {\n          parsedWords.push({\n            id: `${index}-newline`,\n            text: '\\n',\n            isVisible: false,\n            type: 'newline'\n          });\n        }\n      });\n      setWords(parsedWords);\n      setCurrentIndex(0);\n      setIsComplete(false);\n    }\n  }, [text]);\n\n  // Animated typing effect\n  useEffect(() => {\n    if (!isStreaming || currentIndex >= words.length) {\n      if (currentIndex >= words.length && !isComplete) {\n        setIsComplete(true);\n        onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n      }\n      return;\n    }\n    const typingSpeed = getTypingSpeed();\n    const timer = setTimeout(() => {\n      setWords(prev => prev.map((word, index) => index === currentIndex ? {\n        ...word,\n        isVisible: true\n      } : word));\n      setCurrentIndex(prev => prev + 1);\n    }, typingSpeed);\n    return () => clearTimeout(timer);\n  }, [currentIndex, isStreaming, words.length, brainwaveMode, isComplete, onComplete]);\n  const getTypingSpeed = () => {\n    switch (brainwaveMode) {\n      case 'delta':\n        return 120;\n      // Slower, more contemplative\n      case 'theta':\n        return 80;\n      // Flowing, creative\n      case 'alpha':\n        return 60;\n      // Balanced, calm\n      case 'beta':\n        return 40;\n      // Fast, analytical\n      case 'gamma':\n        return 30;\n      // Very fast, dynamic\n      default:\n        return 60;\n    }\n  };\n  const getWordAnimation = (word, index) => {\n    const baseDelay = index * 0.05;\n    switch (brainwaveMode) {\n      case 'delta':\n        return {\n          initial: {\n            opacity: 0,\n            y: 10,\n            scale: 0.9\n          },\n          animate: {\n            opacity: 1,\n            y: 0,\n            scale: 1\n          },\n          transition: {\n            duration: 0.8,\n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'theta':\n        return {\n          initial: {\n            opacity: 0,\n            x: -20,\n            rotateY: -15\n          },\n          animate: {\n            opacity: 1,\n            x: 0,\n            rotateY: 0\n          },\n          transition: {\n            duration: 0.6,\n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'alpha':\n        return {\n          initial: {\n            opacity: 0,\n            scale: 0.8\n          },\n          animate: {\n            opacity: 1,\n            scale: 1\n          },\n          transition: {\n            duration: 0.5,\n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'beta':\n        return {\n          initial: {\n            opacity: 0,\n            y: -5\n          },\n          animate: {\n            opacity: 1,\n            y: 0\n          },\n          transition: {\n            duration: 0.3,\n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'gamma':\n        return {\n          initial: {\n            opacity: 0,\n            scale: 0.7,\n            rotateZ: -5\n          },\n          animate: {\n            opacity: 1,\n            scale: 1,\n            rotateZ: 0\n          },\n          transition: {\n            duration: 0.2,\n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      default:\n        return {\n          initial: {\n            opacity: 0,\n            scale: 0.8\n          },\n          animate: {\n            opacity: 1,\n            scale: 1\n          },\n          transition: {\n            duration: 0.5,\n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n    }\n  };\n  const getWordStyle = word => {\n    const baseStyle = \"inline-block\";\n    if (word.type === 'punctuation') {\n      return `${baseStyle} text-purple-400 font-bold`;\n    } else if (word.type === 'newline') {\n      return `${baseStyle} w-full h-4`;\n    } else {\n      return `${baseStyle} text-white`;\n    }\n  };\n  const getConsciousnessGlow = () => {\n    switch (brainwaveMode) {\n      case 'delta':\n        return 'shadow-[0_0_20px_rgba(139,92,246,0.3)]';\n      case 'theta':\n        return 'shadow-[0_0_15px_rgba(168,85,247,0.4)]';\n      case 'alpha':\n        return 'shadow-[0_0_10px_rgba(59,130,246,0.3)]';\n      case 'beta':\n        return 'shadow-[0_0_8px_rgba(34,197,94,0.3)]';\n      case 'gamma':\n        return 'shadow-[0_0_25px_rgba(236,72,153,0.4)]';\n      default:\n        return 'shadow-[0_0_10px_rgba(59,130,246,0.3)]';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: `leading-relaxed ${getConsciousnessGlow()}`,\n    children: [/*#__PURE__*/_jsxDEV(AnimatePresence, {\n      children: words.map((word, index) => /*#__PURE__*/_jsxDEV(motion.span, {\n        className: getWordStyle(word),\n        ...getWordAnimation(word, index),\n        style: {\n          display: word.isVisible ? 'inline-block' : 'none'\n        },\n        children: [word.text, word.type === 'newline' && /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 41\n        }, this)]\n      }, word.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), isStreaming && currentIndex < words.length && /*#__PURE__*/_jsxDEV(motion.span, {\n      className: \"inline-block w-0.5 h-6 bg-gradient-to-b from-purple-400 to-blue-400 ml-1\",\n      animate: {\n        opacity: [1, 0, 1],\n        scaleY: [1, 1.2, 1]\n      },\n      transition: {\n        duration: 1,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }, this), isComplete && /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        scale: 0\n      },\n      animate: {\n        opacity: 1,\n        scale: 1\n      },\n      className: \"inline-block ml-2\",\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        className: \"w-2 h-2 bg-green-400 rounded-full\",\n        animate: {\n          scale: [1, 1.5, 1],\n          opacity: [1, 0.5, 1]\n        },\n        transition: {\n          duration: 2,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamingText, \"oorxCPmun1Z5BF66BCwRcN9JoRY=\");\n_c = StreamingText;\nvar _c;\n$RefreshReg$(_c, \"StreamingText\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","AnimatePresence","jsxDEV","_jsxDEV","StreamingText","text","isStreaming","brainwaveMode","onComplete","_s","words","setWords","currentIndex","setCurrentIndex","isComplete","setIsComplete","containerRef","parsedWords","wordArray","split","forEach","word","index","trim","push","id","isVisible","type","test","includes","length","typingSpeed","getTypingSpeed","timer","setTimeout","prev","map","clearTimeout","getWordAnimation","baseDelay","initial","opacity","y","scale","animate","transition","duration","delay","ease","x","rotateY","rotateZ","getWordStyle","baseStyle","getConsciousnessGlow","ref","className","children","span","style","display","fileName","_jsxFileName","lineNumber","columnNumber","scaleY","repeat","Infinity","div","_c","$RefreshReg$"],"sources":["/Users/deshonjackson/Desktop/spiritlink.space/src/components/StreamingText.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface StreamingTextProps {\n  text: string;\n  isStreaming: boolean;\n  brainwaveMode: string;\n  onComplete?: () => void;\n}\n\ninterface Word {\n  id: string;\n  text: string;\n  isVisible: boolean;\n  type: 'word' | 'punctuation' | 'newline';\n}\n\nexport const StreamingText: React.FC<StreamingTextProps> = ({ \n  text, \n  isStreaming, \n  brainwaveMode,\n  onComplete \n}) => {\n  const [words, setWords] = useState<Word[]>([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // Parse text into words with proper typing\n  useEffect(() => {\n    if (text) {\n      const parsedWords: Word[] = [];\n      const wordArray = text.split(/(\\s+)/);\n      \n      wordArray.forEach((word, index) => {\n        if (word.trim()) {\n          parsedWords.push({\n            id: `${index}-${word}`,\n            text: word,\n            isVisible: false,\n            type: /^[.,!?;:]$/.test(word) ? 'punctuation' : 'word'\n          });\n        } else if (word.includes('\\n')) {\n          parsedWords.push({\n            id: `${index}-newline`,\n            text: '\\n',\n            isVisible: false,\n            type: 'newline'\n          });\n        }\n      });\n      \n      setWords(parsedWords);\n      setCurrentIndex(0);\n      setIsComplete(false);\n    }\n  }, [text]);\n\n  // Animated typing effect\n  useEffect(() => {\n    if (!isStreaming || currentIndex >= words.length) {\n      if (currentIndex >= words.length && !isComplete) {\n        setIsComplete(true);\n        onComplete?.();\n      }\n      return;\n    }\n\n    const typingSpeed = getTypingSpeed();\n    const timer = setTimeout(() => {\n      setWords(prev => \n        prev.map((word, index) => \n          index === currentIndex ? { ...word, isVisible: true } : word\n        )\n      );\n      setCurrentIndex(prev => prev + 1);\n    }, typingSpeed);\n\n    return () => clearTimeout(timer);\n  }, [currentIndex, isStreaming, words.length, brainwaveMode, isComplete, onComplete]);\n\n  const getTypingSpeed = () => {\n    switch (brainwaveMode) {\n      case 'delta': return 120; // Slower, more contemplative\n      case 'theta': return 80;  // Flowing, creative\n      case 'alpha': return 60;  // Balanced, calm\n      case 'beta': return 40;   // Fast, analytical\n      case 'gamma': return 30;  // Very fast, dynamic\n      default: return 60;\n    }\n  };\n\n  const getWordAnimation = (word: Word, index: number) => {\n    const baseDelay = index * 0.05;\n    \n    switch (brainwaveMode) {\n      case 'delta':\n        return {\n          initial: { opacity: 0, y: 10, scale: 0.9 },\n          animate: { opacity: 1, y: 0, scale: 1 },\n          transition: { \n            duration: 0.8, \n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'theta':\n        return {\n          initial: { opacity: 0, x: -20, rotateY: -15 },\n          animate: { opacity: 1, x: 0, rotateY: 0 },\n          transition: { \n            duration: 0.6, \n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'alpha':\n        return {\n          initial: { opacity: 0, scale: 0.8 },\n          animate: { opacity: 1, scale: 1 },\n          transition: { \n            duration: 0.5, \n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'beta':\n        return {\n          initial: { opacity: 0, y: -5 },\n          animate: { opacity: 1, y: 0 },\n          transition: { \n            duration: 0.3, \n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      case 'gamma':\n        return {\n          initial: { opacity: 0, scale: 0.7, rotateZ: -5 },\n          animate: { opacity: 1, scale: 1, rotateZ: 0 },\n          transition: { \n            duration: 0.2, \n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n      default:\n        return {\n          initial: { opacity: 0, scale: 0.8 },\n          animate: { opacity: 1, scale: 1 },\n          transition: { \n            duration: 0.5, \n            delay: baseDelay,\n            ease: \"easeOut\"\n          }\n        };\n    }\n  };\n\n  const getWordStyle = (word: Word) => {\n    const baseStyle = \"inline-block\";\n    \n    if (word.type === 'punctuation') {\n      return `${baseStyle} text-purple-400 font-bold`;\n    } else if (word.type === 'newline') {\n      return `${baseStyle} w-full h-4`;\n    } else {\n      return `${baseStyle} text-white`;\n    }\n  };\n\n  const getConsciousnessGlow = () => {\n    switch (brainwaveMode) {\n      case 'delta':\n        return 'shadow-[0_0_20px_rgba(139,92,246,0.3)]';\n      case 'theta':\n        return 'shadow-[0_0_15px_rgba(168,85,247,0.4)]';\n      case 'alpha':\n        return 'shadow-[0_0_10px_rgba(59,130,246,0.3)]';\n      case 'beta':\n        return 'shadow-[0_0_8px_rgba(34,197,94,0.3)]';\n      case 'gamma':\n        return 'shadow-[0_0_25px_rgba(236,72,153,0.4)]';\n      default:\n        return 'shadow-[0_0_10px_rgba(59,130,246,0.3)]';\n    }\n  };\n\n  return (\n    <div \n      ref={containerRef}\n      className={`leading-relaxed ${getConsciousnessGlow()}`}\n    >\n      <AnimatePresence>\n        {words.map((word, index) => (\n          <motion.span\n            key={word.id}\n            className={getWordStyle(word)}\n            {...getWordAnimation(word, index)}\n            style={{\n              display: word.isVisible ? 'inline-block' : 'none'\n            }}\n          >\n            {word.text}\n            {word.type === 'newline' && <br />}\n          </motion.span>\n        ))}\n      </AnimatePresence>\n      \n      {/* Animated cursor */}\n      {isStreaming && currentIndex < words.length && (\n        <motion.span\n          className=\"inline-block w-0.5 h-6 bg-gradient-to-b from-purple-400 to-blue-400 ml-1\"\n          animate={{ \n            opacity: [1, 0, 1],\n            scaleY: [1, 1.2, 1]\n          }}\n          transition={{ \n            duration: 1,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      )}\n      \n      {/* Completion indicator */}\n      {isComplete && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0 }}\n          animate={{ opacity: 1, scale: 1 }}\n          className=\"inline-block ml-2\"\n        >\n          <motion.div\n            className=\"w-2 h-2 bg-green-400 rounded-full\"\n            animate={{ \n              scale: [1, 1.5, 1],\n              opacity: [1, 0.5, 1]\n            }}\n            transition={{ \n              duration: 2,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          />\n        </motion.div>\n      )}\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}