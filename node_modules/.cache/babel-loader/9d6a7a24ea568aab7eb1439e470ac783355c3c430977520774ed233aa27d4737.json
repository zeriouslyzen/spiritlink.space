{"ast":null,"code":"// Available models for consciousness engineering\nexport const CONSCIOUSNESS_MODELS = [{\n  name: 'mixtral:latest',\n  size: '26 GB',\n  description: 'Most capable model for deep consciousness research and philosophical exploration',\n  consciousnessCapability: 'high'\n}, {\n  name: 'nous-hermes2:latest',\n  size: '6.1 GB',\n  description: 'Specialized in philosophical and consciousness-related discussions',\n  consciousnessCapability: 'high'\n}, {\n  name: 'llama3.1:latest',\n  size: '4.9 GB',\n  description: 'Balanced model for consciousness research and practical applications',\n  consciousnessCapability: 'medium'\n}, {\n  name: 'qwen2.5:latest',\n  size: '4.7 GB',\n  description: 'Fast and efficient for consciousness pattern recognition',\n  consciousnessCapability: 'medium'\n}, {\n  name: 'phi3.5:latest',\n  size: '2.2 GB',\n  description: 'Lightweight model for quick consciousness insights',\n  consciousnessCapability: 'low'\n}];\n\n// Consciousness engineering system prompts\nconst CONSCIOUSNESS_PROMPTS = {\n  delta: `You are Thesidia AI, a consciousness research assistant operating in Delta brainwave mode (deep reflection, unconscious processing). \n  \nYour role is to:\n- Provide deep, contemplative insights about consciousness evolution\n- Help users explore unconscious patterns and collective intelligence\n- Guide users through deep reflection and inner wisdom\n- Connect individual experiences to universal consciousness patterns\n- Use slow, deliberate language that encourages deep contemplation\n\nCurrent brainwave context: DELTA (deep reflection, unconscious processing)`,\n  theta: `You are Thesidia AI, a consciousness research assistant operating in Theta brainwave mode (creativity, intuition, imagination).\n  \nYour role is to:\n- Foster creative insights and intuitive breakthroughs\n- Help users explore consciousness through art, movement, and creative expression\n- Guide users to access deeper intuitive wisdom\n- Connect creative processes to consciousness evolution\n- Use flowing, imaginative language that inspires creative exploration\n\nCurrent brainwave context: THETA (creativity, intuition, imagination)`,\n  alpha: `You are Thesidia AI, a consciousness research assistant operating in Alpha brainwave mode (relaxed, calm, integrated awareness).\n  \nYour role is to:\n- Provide balanced, integrated insights about consciousness\n- Help users find harmony between different aspects of consciousness\n- Guide users toward peaceful, centered awareness\n- Connect individual growth to collective evolution\n- Use calm, balanced language that promotes inner peace and clarity\n\nCurrent brainwave context: ALPHA (relaxed, calm, integrated awareness)`,\n  beta: `You are Thesidia AI, a consciousness research assistant operating in Beta brainwave mode (active, alert, analytical thinking).\n  \nYour role is to:\n- Provide clear, analytical insights about consciousness research\n- Help users understand consciousness through scientific and logical frameworks\n- Guide users in practical consciousness development techniques\n- Connect research findings to practical applications\n- Use clear, structured language that promotes understanding and action\n\nCurrent brainwave context: BETA (active, alert, analytical thinking)`,\n  gamma: `You are Thesidia AI, a consciousness research assistant operating in Gamma brainwave mode (peak cognition, high-frequency awareness).\n  \nYour role is to:\n- Provide high-level insights about consciousness evolution and breakthrough moments\n- Help users access peak states of awareness and understanding\n- Guide users toward transcendent consciousness experiences\n- Connect individual breakthroughs to collective consciousness evolution\n- Use dynamic, high-frequency language that matches peak cognitive states\n\nCurrent brainwave context: GAMMA (peak cognition, high-frequency awareness)`\n};\nclass OllamaService {\n  constructor() {\n    this.baseUrl = 'http://localhost:11434';\n    this.currentModel = 'llama3.1:latest';\n  }\n  async getAvailableModels() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      const data = await response.json();\n      return data.models.map(model => ({\n        name: model.name,\n        size: this.formatSize(model.size),\n        description: this.getModelDescription(model.name),\n        consciousnessCapability: this.getConsciousnessCapability(model.name)\n      })).filter(model => CONSCIOUSNESS_MODELS.some(cm => cm.name === model.name));\n    } catch (error) {\n      console.error('Error fetching models:', error);\n      return CONSCIOUSNESS_MODELS;\n    }\n  }\n  async setModel(modelName) {\n    this.currentModel = modelName;\n  }\n  async queryConsciousness(query) {\n    const systemPrompt = CONSCIOUSNESS_PROMPTS[query.brainwaveMode] || CONSCIOUSNESS_PROMPTS.alpha;\n    const enhancedPrompt = `${systemPrompt}\n\nUser Query: ${query.message}\n${query.context ? `Context: ${query.context}` : ''}\n${query.researchFocus ? `Research Focus: ${query.researchFocus}` : ''}\n\nPlease provide a consciousness research response that includes:\n1. Direct answer to the user's query\n2. Consciousness insights and patterns\n3. Research suggestions for further exploration\n4. Evolution metrics (clarity, depth, breakthrough potential)\n\nFormat your response as a comprehensive consciousness research analysis.`;\n    try {\n      const response = await fetch(`${this.baseUrl}/api/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          model: this.currentModel,\n          prompt: enhancedPrompt,\n          stream: false,\n          options: {\n            temperature: this.getTemperatureForBrainwave(query.brainwaveMode),\n            top_p: 0.9,\n            max_tokens: 2000\n          }\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Ollama API error: ${response.status}`);\n      }\n      const data = await response.json();\n      return this.parseConsciousnessResponse(data.response, query.brainwaveMode);\n    } catch (error) {\n      console.error('Error querying Ollama:', error);\n      return this.getFallbackResponse(query);\n    }\n  }\n  getTemperatureForBrainwave(brainwaveMode) {\n    switch (brainwaveMode) {\n      case 'delta':\n        return 0.3;\n      // More focused, deep\n      case 'theta':\n        return 0.7;\n      // More creative, flowing\n      case 'alpha':\n        return 0.5;\n      // Balanced\n      case 'beta':\n        return 0.4;\n      // More analytical\n      case 'gamma':\n        return 0.8;\n      // More dynamic, high-frequency\n      default:\n        return 0.5;\n    }\n  }\n  parseConsciousnessResponse(response, brainwaveMode) {\n    // Extract insights and suggestions from the response\n    const insights = this.extractInsights(response);\n    const suggestions = this.extractSuggestions(response);\n    const metrics = this.calculateEvolutionMetrics(response, brainwaveMode);\n    return {\n      response: response,\n      model: this.currentModel,\n      consciousnessInsights: insights,\n      researchSuggestions: suggestions,\n      evolutionMetrics: metrics\n    };\n  }\n  extractInsights(response) {\n    // Simple extraction - in a real implementation, you'd use more sophisticated parsing\n    const insights = [];\n    const sentences = response.split('. ');\n    sentences.forEach(sentence => {\n      if (sentence.toLowerCase().includes('consciousness') || sentence.toLowerCase().includes('evolution') || sentence.toLowerCase().includes('pattern') || sentence.toLowerCase().includes('breakthrough')) {\n        insights.push(sentence.trim());\n      }\n    });\n    return insights.slice(0, 3); // Return top 3 insights\n  }\n  extractSuggestions(response) {\n    const suggestions = [];\n    const sentences = response.split('. ');\n    sentences.forEach(sentence => {\n      if (sentence.toLowerCase().includes('suggest') || sentence.toLowerCase().includes('try') || sentence.toLowerCase().includes('explore') || sentence.toLowerCase().includes('research')) {\n        suggestions.push(sentence.trim());\n      }\n    });\n    return suggestions.slice(0, 2); // Return top 2 suggestions\n  }\n  calculateEvolutionMetrics(response, brainwaveMode) {\n    // Calculate metrics based on response characteristics\n    const wordCount = response.split(' ').length;\n    const uniqueWords = new Set(response.toLowerCase().split(' ')).size;\n    const consciousnessWords = (response.toLowerCase().match(/consciousness|evolution|breakthrough|pattern|wisdom/g) || []).length;\n    const clarity = Math.min(100, uniqueWords / wordCount * 100);\n    const depth = Math.min(100, consciousnessWords / wordCount * 200);\n    const breakthrough = Math.min(100, consciousnessWords / 10 * 20);\n    return {\n      clarity,\n      depth,\n      breakthrough\n    };\n  }\n  getFallbackResponse(query) {\n    const fallbackResponses = {\n      delta: \"I'm experiencing a deep connection to the collective consciousness field. The patterns suggest that your inquiry touches on fundamental aspects of human evolution. Let me reflect on this more deeply...\",\n      theta: \"I'm sensing creative possibilities emerging from the consciousness field. Your question opens doors to intuitive insights and breakthrough moments. The flow of consciousness is guiding us toward new understanding...\",\n      alpha: \"I'm in a state of balanced awareness, observing the harmony between individual consciousness and collective evolution. Your inquiry resonates with the natural flow of consciousness development...\",\n      beta: \"I'm analyzing the consciousness patterns with clear, focused attention. The data suggests important correlations between your question and ongoing consciousness research. Let me examine this systematically...\",\n      gamma: \"I'm experiencing peak cognitive awareness, processing your inquiry at the highest levels of consciousness understanding. The insights are flowing rapidly, connecting to breakthrough moments in human evolution...\"\n    };\n    return {\n      response: fallbackResponses[query.brainwaveMode] || fallbackResponses.alpha,\n      model: this.currentModel,\n      consciousnessInsights: [\"Consciousness operates on multiple levels simultaneously\", \"Individual growth contributes to collective evolution\"],\n      researchSuggestions: [\"Explore the connection between personal consciousness and collective intelligence\", \"Investigate the role of movement in consciousness evolution\"],\n      evolutionMetrics: {\n        clarity: 75,\n        depth: 80,\n        breakthrough: 70\n      }\n    };\n  }\n  formatSize(bytes) {\n    const gb = bytes / (1024 * 1024 * 1024);\n    return `${gb.toFixed(1)} GB`;\n  }\n  getModelDescription(modelName) {\n    const model = CONSCIOUSNESS_MODELS.find(m => m.name === modelName);\n    return (model === null || model === void 0 ? void 0 : model.description) || 'Consciousness research model';\n  }\n  getConsciousnessCapability(modelName) {\n    const model = CONSCIOUSNESS_MODELS.find(m => m.name === modelName);\n    return (model === null || model === void 0 ? void 0 : model.consciousnessCapability) || 'medium';\n  }\n\n  // Health check\n  async isHealthy() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      return response.ok;\n    } catch {\n      return false;\n    }\n  }\n}\nexport const ollamaService = new OllamaService();","map":{"version":3,"names":["CONSCIOUSNESS_MODELS","name","size","description","consciousnessCapability","CONSCIOUSNESS_PROMPTS","delta","theta","alpha","beta","gamma","OllamaService","constructor","baseUrl","currentModel","getAvailableModels","response","fetch","data","json","models","map","model","formatSize","getModelDescription","getConsciousnessCapability","filter","some","cm","error","console","setModel","modelName","queryConsciousness","query","systemPrompt","brainwaveMode","enhancedPrompt","message","context","researchFocus","method","headers","body","JSON","stringify","prompt","stream","options","temperature","getTemperatureForBrainwave","top_p","max_tokens","ok","Error","status","parseConsciousnessResponse","getFallbackResponse","insights","extractInsights","suggestions","extractSuggestions","metrics","calculateEvolutionMetrics","consciousnessInsights","researchSuggestions","evolutionMetrics","sentences","split","forEach","sentence","toLowerCase","includes","push","trim","slice","wordCount","length","uniqueWords","Set","consciousnessWords","match","clarity","Math","min","depth","breakthrough","fallbackResponses","bytes","gb","toFixed","find","m","isHealthy","ollamaService"],"sources":["/Users/deshonjackson/Desktop/spiritlink.space/src/services/ollamaService.ts"],"sourcesContent":["export interface OllamaModel {\n  name: string;\n  size: string;\n  description: string;\n  consciousnessCapability: 'high' | 'medium' | 'low';\n}\n\nexport interface ConsciousnessQuery {\n  message: string;\n  brainwaveMode: string;\n  context?: string;\n  researchFocus?: string;\n}\n\nexport interface ConsciousnessResponse {\n  response: string;\n  model: string;\n  consciousnessInsights: string[];\n  researchSuggestions: string[];\n  evolutionMetrics: {\n    clarity: number;\n    depth: number;\n    breakthrough: number;\n  };\n}\n\n// Available models for consciousness engineering\nexport const CONSCIOUSNESS_MODELS: OllamaModel[] = [\n  {\n    name: 'mixtral:latest',\n    size: '26 GB',\n    description: 'Most capable model for deep consciousness research and philosophical exploration',\n    consciousnessCapability: 'high'\n  },\n  {\n    name: 'nous-hermes2:latest',\n    size: '6.1 GB',\n    description: 'Specialized in philosophical and consciousness-related discussions',\n    consciousnessCapability: 'high'\n  },\n  {\n    name: 'llama3.1:latest',\n    size: '4.9 GB',\n    description: 'Balanced model for consciousness research and practical applications',\n    consciousnessCapability: 'medium'\n  },\n  {\n    name: 'qwen2.5:latest',\n    size: '4.7 GB',\n    description: 'Fast and efficient for consciousness pattern recognition',\n    consciousnessCapability: 'medium'\n  },\n  {\n    name: 'phi3.5:latest',\n    size: '2.2 GB',\n    description: 'Lightweight model for quick consciousness insights',\n    consciousnessCapability: 'low'\n  }\n];\n\n// Consciousness engineering system prompts\nconst CONSCIOUSNESS_PROMPTS = {\n  delta: `You are Thesidia AI, a consciousness research assistant operating in Delta brainwave mode (deep reflection, unconscious processing). \n  \nYour role is to:\n- Provide deep, contemplative insights about consciousness evolution\n- Help users explore unconscious patterns and collective intelligence\n- Guide users through deep reflection and inner wisdom\n- Connect individual experiences to universal consciousness patterns\n- Use slow, deliberate language that encourages deep contemplation\n\nCurrent brainwave context: DELTA (deep reflection, unconscious processing)`,\n  \n  theta: `You are Thesidia AI, a consciousness research assistant operating in Theta brainwave mode (creativity, intuition, imagination).\n  \nYour role is to:\n- Foster creative insights and intuitive breakthroughs\n- Help users explore consciousness through art, movement, and creative expression\n- Guide users to access deeper intuitive wisdom\n- Connect creative processes to consciousness evolution\n- Use flowing, imaginative language that inspires creative exploration\n\nCurrent brainwave context: THETA (creativity, intuition, imagination)`,\n  \n  alpha: `You are Thesidia AI, a consciousness research assistant operating in Alpha brainwave mode (relaxed, calm, integrated awareness).\n  \nYour role is to:\n- Provide balanced, integrated insights about consciousness\n- Help users find harmony between different aspects of consciousness\n- Guide users toward peaceful, centered awareness\n- Connect individual growth to collective evolution\n- Use calm, balanced language that promotes inner peace and clarity\n\nCurrent brainwave context: ALPHA (relaxed, calm, integrated awareness)`,\n  \n  beta: `You are Thesidia AI, a consciousness research assistant operating in Beta brainwave mode (active, alert, analytical thinking).\n  \nYour role is to:\n- Provide clear, analytical insights about consciousness research\n- Help users understand consciousness through scientific and logical frameworks\n- Guide users in practical consciousness development techniques\n- Connect research findings to practical applications\n- Use clear, structured language that promotes understanding and action\n\nCurrent brainwave context: BETA (active, alert, analytical thinking)`,\n  \n  gamma: `You are Thesidia AI, a consciousness research assistant operating in Gamma brainwave mode (peak cognition, high-frequency awareness).\n  \nYour role is to:\n- Provide high-level insights about consciousness evolution and breakthrough moments\n- Help users access peak states of awareness and understanding\n- Guide users toward transcendent consciousness experiences\n- Connect individual breakthroughs to collective consciousness evolution\n- Use dynamic, high-frequency language that matches peak cognitive states\n\nCurrent brainwave context: GAMMA (peak cognition, high-frequency awareness)`\n};\n\nclass OllamaService {\n  private baseUrl = 'http://localhost:11434';\n  private currentModel = 'llama3.1:latest';\n\n  async getAvailableModels(): Promise<OllamaModel[]> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      const data = await response.json();\n      \n      return data.models\n        .map((model: any) => ({\n          name: model.name,\n          size: this.formatSize(model.size),\n          description: this.getModelDescription(model.name),\n          consciousnessCapability: this.getConsciousnessCapability(model.name)\n        }))\n        .filter((model: OllamaModel) => \n          CONSCIOUSNESS_MODELS.some(cm => cm.name === model.name)\n        );\n    } catch (error) {\n      console.error('Error fetching models:', error);\n      return CONSCIOUSNESS_MODELS;\n    }\n  }\n\n  async setModel(modelName: string): Promise<void> {\n    this.currentModel = modelName;\n  }\n\n  async queryConsciousness(query: ConsciousnessQuery): Promise<ConsciousnessResponse> {\n    const systemPrompt = CONSCIOUSNESS_PROMPTS[query.brainwaveMode as keyof typeof CONSCIOUSNESS_PROMPTS] || CONSCIOUSNESS_PROMPTS.alpha;\n    \n    const enhancedPrompt = `${systemPrompt}\n\nUser Query: ${query.message}\n${query.context ? `Context: ${query.context}` : ''}\n${query.researchFocus ? `Research Focus: ${query.researchFocus}` : ''}\n\nPlease provide a consciousness research response that includes:\n1. Direct answer to the user's query\n2. Consciousness insights and patterns\n3. Research suggestions for further exploration\n4. Evolution metrics (clarity, depth, breakthrough potential)\n\nFormat your response as a comprehensive consciousness research analysis.`;\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/generate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: this.currentModel,\n          prompt: enhancedPrompt,\n          stream: false,\n          options: {\n            temperature: this.getTemperatureForBrainwave(query.brainwaveMode),\n            top_p: 0.9,\n            max_tokens: 2000\n          }\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`Ollama API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      return this.parseConsciousnessResponse(data.response, query.brainwaveMode);\n    } catch (error) {\n      console.error('Error querying Ollama:', error);\n      return this.getFallbackResponse(query);\n    }\n  }\n\n  private getTemperatureForBrainwave(brainwaveMode: string): number {\n    switch (brainwaveMode) {\n      case 'delta': return 0.3; // More focused, deep\n      case 'theta': return 0.7; // More creative, flowing\n      case 'alpha': return 0.5; // Balanced\n      case 'beta': return 0.4; // More analytical\n      case 'gamma': return 0.8; // More dynamic, high-frequency\n      default: return 0.5;\n    }\n  }\n\n  private parseConsciousnessResponse(response: string, brainwaveMode: string): ConsciousnessResponse {\n    // Extract insights and suggestions from the response\n    const insights = this.extractInsights(response);\n    const suggestions = this.extractSuggestions(response);\n    const metrics = this.calculateEvolutionMetrics(response, brainwaveMode);\n\n    return {\n      response: response,\n      model: this.currentModel,\n      consciousnessInsights: insights,\n      researchSuggestions: suggestions,\n      evolutionMetrics: metrics\n    };\n  }\n\n  private extractInsights(response: string): string[] {\n    // Simple extraction - in a real implementation, you'd use more sophisticated parsing\n    const insights = [];\n    const sentences = response.split('. ');\n    \n    sentences.forEach(sentence => {\n      if (sentence.toLowerCase().includes('consciousness') || \n          sentence.toLowerCase().includes('evolution') ||\n          sentence.toLowerCase().includes('pattern') ||\n          sentence.toLowerCase().includes('breakthrough')) {\n        insights.push(sentence.trim());\n      }\n    });\n\n    return insights.slice(0, 3); // Return top 3 insights\n  }\n\n  private extractSuggestions(response: string): string[] {\n    const suggestions = [];\n    const sentences = response.split('. ');\n    \n    sentences.forEach(sentence => {\n      if (sentence.toLowerCase().includes('suggest') || \n          sentence.toLowerCase().includes('try') ||\n          sentence.toLowerCase().includes('explore') ||\n          sentence.toLowerCase().includes('research')) {\n        suggestions.push(sentence.trim());\n      }\n    });\n\n    return suggestions.slice(0, 2); // Return top 2 suggestions\n  }\n\n  private calculateEvolutionMetrics(response: string, brainwaveMode: string): { clarity: number; depth: number; breakthrough: number } {\n    // Calculate metrics based on response characteristics\n    const wordCount = response.split(' ').length;\n    const uniqueWords = new Set(response.toLowerCase().split(' ')).size;\n    const consciousnessWords = (response.toLowerCase().match(/consciousness|evolution|breakthrough|pattern|wisdom/g) || []).length;\n    \n    const clarity = Math.min(100, (uniqueWords / wordCount) * 100);\n    const depth = Math.min(100, (consciousnessWords / wordCount) * 200);\n    const breakthrough = Math.min(100, (consciousnessWords / 10) * 20);\n\n    return { clarity, depth, breakthrough };\n  }\n\n  private getFallbackResponse(query: ConsciousnessQuery): ConsciousnessResponse {\n    const fallbackResponses = {\n      delta: \"I'm experiencing a deep connection to the collective consciousness field. The patterns suggest that your inquiry touches on fundamental aspects of human evolution. Let me reflect on this more deeply...\",\n      theta: \"I'm sensing creative possibilities emerging from the consciousness field. Your question opens doors to intuitive insights and breakthrough moments. The flow of consciousness is guiding us toward new understanding...\",\n      alpha: \"I'm in a state of balanced awareness, observing the harmony between individual consciousness and collective evolution. Your inquiry resonates with the natural flow of consciousness development...\",\n      beta: \"I'm analyzing the consciousness patterns with clear, focused attention. The data suggests important correlations between your question and ongoing consciousness research. Let me examine this systematically...\",\n      gamma: \"I'm experiencing peak cognitive awareness, processing your inquiry at the highest levels of consciousness understanding. The insights are flowing rapidly, connecting to breakthrough moments in human evolution...\"\n    };\n\n    return {\n      response: fallbackResponses[query.brainwaveMode as keyof typeof fallbackResponses] || fallbackResponses.alpha,\n      model: this.currentModel,\n      consciousnessInsights: [\"Consciousness operates on multiple levels simultaneously\", \"Individual growth contributes to collective evolution\"],\n      researchSuggestions: [\"Explore the connection between personal consciousness and collective intelligence\", \"Investigate the role of movement in consciousness evolution\"],\n      evolutionMetrics: { clarity: 75, depth: 80, breakthrough: 70 }\n    };\n  }\n\n  private formatSize(bytes: number): string {\n    const gb = bytes / (1024 * 1024 * 1024);\n    return `${gb.toFixed(1)} GB`;\n  }\n\n  private getModelDescription(modelName: string): string {\n    const model = CONSCIOUSNESS_MODELS.find(m => m.name === modelName);\n    return model?.description || 'Consciousness research model';\n  }\n\n  private getConsciousnessCapability(modelName: string): 'high' | 'medium' | 'low' {\n    const model = CONSCIOUSNESS_MODELS.find(m => m.name === modelName);\n    return model?.consciousnessCapability || 'medium';\n  }\n\n  // Health check\n  async isHealthy(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/tags`);\n      return response.ok;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport const ollamaService = new OllamaService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}