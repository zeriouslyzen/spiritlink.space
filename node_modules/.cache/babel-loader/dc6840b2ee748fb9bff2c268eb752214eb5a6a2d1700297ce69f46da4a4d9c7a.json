{"ast":null,"code":"var _jsxFileName = \"/Users/deshonjackson/Desktop/spiritlink.space/src/components/ModelSelector.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ollamaService } from '../services/ollamaService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ModelSelector = ({\n  onModelSelect,\n  currentModel,\n  brainwaveMode\n}) => {\n  _s();\n  const [models, setModels] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    loadModels();\n  }, []);\n  const loadModels = async () => {\n    try {\n      setIsLoading(true);\n      const availableModels = await ollamaService.getAvailableModels();\n      setModels(availableModels);\n    } catch (error) {\n      console.error('Error loading models:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const getCapabilityColor = capability => {\n    switch (capability) {\n      case 'high':\n        return 'bg-green-500';\n      case 'medium':\n        return 'bg-yellow-500';\n      case 'low':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n  const getCapabilityText = capability => {\n    switch (capability) {\n      case 'high':\n        return 'High Consciousness';\n      case 'medium':\n        return 'Medium Consciousness';\n      case 'low':\n        return 'Basic Consciousness';\n      default:\n        return 'Unknown';\n    }\n  };\n  const handleModelSelect = modelName => {\n    onModelSelect(modelName);\n    setIsOpen(false);\n  };\n  const currentModelData = models.find(m => m.name === currentModel);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"px-3 py-2 rounded-lg bg-white/10 text-white text-sm hover:bg-white/20 transition-colors\",\n      onClick: () => setIsOpen(!isOpen),\n      children: (currentModelData === null || currentModelData === void 0 ? void 0 : currentModelData.name) || 'Select Model'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-full left-0 mt-1 bg-black border border-white/20 rounded-lg shadow-lg z-50 min-w-48\",\n      children: models.map(model => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `w-full text-left px-3 py-2 text-sm hover:bg-white/10 ${model.name === currentModel ? 'bg-white/20' : ''}`,\n        onClick: () => handleModelSelect(model.name),\n        children: model.name\n      }, model.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(ModelSelector, \"R9ep6H17Xr3N+7WxEvcha6WlP9E=\");\n_c = ModelSelector;\nvar _c;\n$RefreshReg$(_c, \"ModelSelector\");","map":{"version":3,"names":["React","useState","useEffect","ollamaService","jsxDEV","_jsxDEV","ModelSelector","onModelSelect","currentModel","brainwaveMode","_s","models","setModels","isOpen","setIsOpen","isLoading","setIsLoading","loadModels","availableModels","getAvailableModels","error","console","getCapabilityColor","capability","getCapabilityText","handleModelSelect","modelName","currentModelData","find","m","name","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","model","_c","$RefreshReg$"],"sources":["/Users/deshonjackson/Desktop/spiritlink.space/src/components/ModelSelector.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { OllamaModel, ollamaService } from '../services/ollamaService';\n\ninterface ModelSelectorProps {\n  onModelSelect: (modelName: string) => void;\n  currentModel: string;\n  brainwaveMode: string;\n}\n\nexport const ModelSelector: React.FC<ModelSelectorProps> = ({ \n  onModelSelect, \n  currentModel, \n  brainwaveMode \n}) => {\n  const [models, setModels] = useState<OllamaModel[]>([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadModels();\n  }, []);\n\n  const loadModels = async () => {\n    try {\n      setIsLoading(true);\n      const availableModels = await ollamaService.getAvailableModels();\n      setModels(availableModels);\n    } catch (error) {\n      console.error('Error loading models:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getCapabilityColor = (capability: string) => {\n    switch (capability) {\n      case 'high': return 'bg-green-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'low': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getCapabilityText = (capability: string) => {\n    switch (capability) {\n      case 'high': return 'High Consciousness';\n      case 'medium': return 'Medium Consciousness';\n      case 'low': return 'Basic Consciousness';\n      default: return 'Unknown';\n    }\n  };\n\n  const handleModelSelect = (modelName: string) => {\n    onModelSelect(modelName);\n    setIsOpen(false);\n  };\n\n  const currentModelData = models.find(m => m.name === currentModel);\n\n  return (\n    <div className=\"relative\">\n      {/* Simple Model Button */}\n      <button\n        className=\"px-3 py-2 rounded-lg bg-white/10 text-white text-sm hover:bg-white/20 transition-colors\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        {currentModelData?.name || 'Select Model'}\n      </button>\n\n      {/* Simple Dropdown */}\n      {isOpen && (\n        <div className=\"absolute top-full left-0 mt-1 bg-black border border-white/20 rounded-lg shadow-lg z-50 min-w-48\">\n          {models.map((model) => (\n            <button\n              key={model.name}\n              className={`w-full text-left px-3 py-2 text-sm hover:bg-white/10 ${\n                model.name === currentModel ? 'bg-white/20' : ''\n              }`}\n              onClick={() => handleModelSelect(model.name)}\n            >\n              {model.name}\n            </button>\n          ))}\n        </div>\n      )}\n\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}